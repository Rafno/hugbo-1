# Configure the View Resolver
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# ========================= #
# DATABASE CONNECTION SETUP #
# ========================= #


#########################################################################################################
# NOTICE:                                                                                               #
# IF YOU USE THESE CONNECTION SETTINGS, YOU MUST ADD THE POSTGRESQL DEPENDENCY IN THE POM.XML DOCUMENT  #
#########################################################################################################
# What Driver to use
spring.datasource.driver-class-name=org.postgresql.Driver
# The URL to your database
spring.datasource.url=jdbc:postgresql://localhost:5432/
# remember the pass
# User name and Password to your database
spring.datasource.username=postgres
spring.datasource.password=postgres


##############################################
#BARA FYRIR HEROKU PUSHES
# UNCOMMENTA ÞETTA, PUSHA Á HEROKU, COMMENTA AFTUR.
#Skipanir fyrir Heroku:
# Git push heroku master <-- Pushar á heroku
# heroku addons:create heroku-postgresql:hobby-dev <-- Býr til gagnagrunn.
##############################################
#spring.datasource.url=${JDBC_DATABASE_URL}
#spring.datasource.username=${JDBC_DATABASE_USERNAME}
#spring.datasource.password=${JDBC_DATABASE_PASSWORD}


spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.datasource.initialization-mode=always

# ============================= #
# DATA JPA - HIBERNATE SETTINGS #
# ============================= ##

# To offload the responsibility to create the database tables for our
# entities to the DATA JPA system, we can use the following configuration

#Disable whitelabel error pages.
server.error.whitelabel.enabled=true


# Spring will ignore database errors during the data.sql script.
# Proceed with caution!!!
# Set to false if changing medicine database.
spring.datasource.continue-on-error=true

# Fix Postgres JPA Error:
# Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

spring.jpa.hibernate.ddl-auto=update
# There are 5 possible values we can give this configuration, see below for what each one does
# update      -> update the schema
# create      -> creates the schema, destroying previous data
# create-drop -> creates the schema, drop the schema at the end of the session
# none        -> do nothing
# validate    -> Validate the schema, makes no changes to the database

# NOTE:
# Sometimes in development when rapid changes are made on entities, the database
# tables can become a bit wonky, e.g. you add attributes to entities, change
# data type (e.g. int to Long), etc. If you are having some weird problems you can
# try and set this option to `create` and run the system to force a drop of the schema
# and creation of the schema as it should be.
# ALL THE DATA IN THE DATABASE WILL BE LOST. BACK IT UP IF YOU NEED IT!
# Just remember to revert the option back to `update` or `none` if you want any
# data to be persistent after that.

# Log SQL Statements
spring.jpa.show-sql=false

#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.type=trace